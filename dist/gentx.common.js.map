{"version":3,"file":"gentx.common.js","sources":["../src/utils.js","../src/middleware/log.js","../src/source.js","../src/flow.js"],"sourcesContent":["// if condition is false, throw message \nexport function invariant(condition, message) {\n  if (condition) return;\n  throw new Error(message);\n}\n\n// log\nexport function log(...args) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(...args);\n  };\n}\n\n// catch error\nexport function catchError(fn) {\n  return function(...args) {\n    try {\n      return fn.bind(this)(...args);\n    } catch (e) {\n      console.log('uncaught exception:', e);\n      throw e;\n    }\n  }\n}","import { map } from 'rxjs/operators';\nimport { log } from '../utils';\n\nexport function logMiddleware(input, opts={}) {\n  let {flow, flowGroup, middleware} = opts;\n  let typeMsg = { before: 'in', after: 'out' }[middleware];\n\n  // not use as a middleware\n  if (!middleware) return input;\n\n  return input.pipe(\n    map(value => {\n      let logData;\n      \n      try {\n        logData = JSON.parse(JSON.stringify(value));\n      } catch(e) {\n        logData = e.message;\n      }\n\n      log(`[gentx log] ~ flow ${typeMsg} <${flowGroup}>.<${flow}>:`, logData);\n\n      return value;\n    })\n  );\n}\n","import { Observable, from } from 'rxjs';\n\n// create observable from a `observable input` and a `cancel function`\nexport function makeObservable(input, cancel) {\n  let observable = from(input);\n  return Observable.create(observer => {\n    let unsub = observable.subscribe(observer);\n    return function unsubscribe() {\n      cancel();\n      unsub();\n    }\n  });\n}","import { concatMap, mergeMap, switchMap } from 'rxjs/operators';\n\n// concatMap source to flow\nexport function concatMapSource(source) {\n  return (input) => {\n    return input.pipe(\n      concatMap((value) => source(value))\n    );\n  };\n}\n\n// mergeMap source to flow\nexport function mergeMapSource(source) {\n  return (input) => {\n    return input.pipe(\n      mergeMap((value) => source(value))\n    );\n  };\n}\n\n// switchMap source to flow\nexport function switchMapSource(source) {\n  return (input) => {\n    return input.pipe(\n      switchMap((value) => source(value))\n    );\n  };\n}\n\n// create a flow\nexport function flow(flowFn, {\n  groupName='',\n  name='',\n  beforeMiddlewares=[],\n  afterMiddlewares=[]\n}) {\n  const flowName = name || flowFn.name || 'Anonymous';\n\n  // before middlewares\n  const befores = beforeMiddlewares.map(middleware => {\n    return (input, opts={}) => {\n      return middleware(input, { middleware: 'before', ...opts });\n    }\n  });\n\n  // after middlewares\n  const afters = afterMiddlewares.map(middleware => {\n    return (input, opts={}) => {\n      return middleware(input, { middleware: 'after', ...opts });\n    }\n  });;\n\n  // concat middlewares with flow\n  const fns = befores.concat(flowFn).concat(afters);\n\n  // generate flow\n  const flow = function flow(input) {\n    const opts = {\n      flow: flowName,\n      flowGroup: groupName\n    };\n    return fns.reduce((prev, currFn) => currFn(prev, opts), input);\n  }\n\n  return flow;\n}\n\n// create a group flows\nexport function flowGroup(flowMap={}, opts={}) {\n  const groupName = opts.name || 'Anonymous';\n  const flows = {};\n\n  Object.keys(flowMap).forEach(key => {\n    flows[key] = flow(flowMap[key], {\n      ...opts,\n      groupName: groupName,\n      name: key\n    });\n  });\n\n  return flows;\n}\n\n// create flow from source\nexport function flowSource(source, operatorType='concatMap', opts={}) {\n  let flowName = opts.name || source.name || 'Anonymous';\n  let operator = {\n    'concatMap': concatMapSource,\n    'mergeMap': mergeMapSource,\n    'switchMap': switchMapSource\n  }[operatorType];\n\n  if (!operator) {\n    throw new Error(`[gentx error] operatorType must in ['concatMap', 'mergeMap', 'switchMap'], but get <${operatorType}> when flowSource <${flowName}>.`)\n  }\n\n  return flow(operator(source), { ...opts, name: flowName });\n}\n\n// crate a flow group from sources\nexport function flowGroupSources(sourceMap, operatorType='concatMap', opts={}) {\n  const groupName = opts.groupName || 'Anonymous';\n  const flows = {};\n\n  Object.keys(sourceMap).forEach(key => {\n    flows[name] = this.flowSource(sourceMap[key], operatorType, {\n      ...opts,\n      groupName: groupName,\n      name: key\n    });\n  });\n\n  return flows;\n}"],"names":["log","process","env","NODE_ENV","catchError","fn","bind","e","logMiddleware","input","opts","flow","flowGroup","middleware","typeMsg","before","after","pipe","map","logData","JSON","parse","stringify","value","message","makeObservable","cancel","observable","from","Observable","create","unsub","subscribe","observer","unsubscribe","concatMapSource","source","concatMap","mergeMapSource","mergeMap","switchMapSource","switchMap","flowFn","groupName","name","beforeMiddlewares","afterMiddlewares","flowName","befores","afters","fns","concat","reduce","prev","currFn","flowMap","flows","keys","forEach","key","flowSource","operatorType","operator","Error","flowGroupSources","sourceMap"],"mappings":";;;;;;;AAAA;AACA;;AAMA,AAAO,SAASA,GAAT,GAAsB;MACvBC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;;;yBACjCH,GAAR;GAEH;;;AAGD,AAAO,SAASI,UAAT,CAAoBC,EAApB,EAAwB;SACtB,YAAkB;QACnB;aACKA,GAAGC,IAAH,CAAQ,IAAR,6BAAP;KADF,CAEE,OAAOC,CAAP,EAAU;cACFP,GAAR,CAAY,qBAAZ,EAAmCO,CAAnC;YACMA,CAAN;;GALJ;;;ACZK,SAASC,aAAT,CAAuBC,KAAvB,EAAuC;MAATC,IAAS,uEAAJ,EAAI;MACvCC,IADuC,GACRD,IADQ,CACvCC,IADuC;MACjCC,SADiC,GACRF,IADQ,CACjCE,SADiC;MACtBC,UADsB,GACRH,IADQ,CACtBG,UADsB;;MAExCC,UAAU,EAAEC,QAAQ,IAAV,EAAgBC,OAAO,KAAvB,GAA+BH,UAA/B,CAAd;;;MAGI,CAACA,UAAL,EAAiB,OAAOJ,KAAP;;SAEVA,MAAMQ,IAAN,CACLC,cAAI,iBAAS;QACPC,gBAAJ;;QAEI;gBACQC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeC,KAAf,CAAX,CAAV;KADF,CAEE,OAAMhB,CAAN,EAAS;gBACCA,EAAEiB,OAAZ;;;gCAGwBV,OAA1B,UAAsCF,SAAtC,WAAqDD,IAArD,SAA+DQ,OAA/D;;WAEOI,KAAP;GAXF,CADK,CAAP;;;ACRF;AACA,AAAO,SAASE,cAAT,CAAwBhB,KAAxB,EAA+BiB,MAA/B,EAAuC;MACxCC,aAAaC,UAAKnB,KAAL,CAAjB;SACOoB,gBAAWC,MAAX,CAAkB,oBAAY;QAC/BC,QAAQJ,WAAWK,SAAX,CAAqBC,QAArB,CAAZ;WACO,SAASC,WAAT,GAAuB;;;KAA9B;GAFK,CAAP;;;;;;;;;;;;;;;;;ACHF;AACA,AAAO,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;SAC/B,UAAC3B,KAAD,EAAW;WACTA,MAAMQ,IAAN,CACLoB,oBAAU,UAACd,KAAD;aAAWa,OAAOb,KAAP,CAAX;KAAV,CADK,CAAP;GADF;;;;AAQF,AAAO,SAASe,cAAT,CAAwBF,MAAxB,EAAgC;SAC9B,UAAC3B,KAAD,EAAW;WACTA,MAAMQ,IAAN,CACLsB,mBAAS,UAAChB,KAAD;aAAWa,OAAOb,KAAP,CAAX;KAAT,CADK,CAAP;GADF;;;;AAQF,AAAO,SAASiB,eAAT,CAAyBJ,MAAzB,EAAiC;SAC/B,UAAC3B,KAAD,EAAW;WACTA,MAAMQ,IAAN,CACLwB,oBAAU,UAAClB,KAAD;aAAWa,OAAOb,KAAP,CAAX;KAAV,CADK,CAAP;GADF;;;;AAQF,AAAO,SAASZ,IAAT,CAAc+B,MAAd,QAKJ;4BAJDC,SAIC;MAJDA,SAIC,kCAJS,EAIT;uBAHDC,IAGC;MAHDA,IAGC,6BAHI,EAGJ;mCAFDC,iBAEC;MAFDA,iBAEC,yCAFiB,EAEjB;mCADDC,gBACC;MADDA,gBACC,yCADgB,EAChB;;MACKC,WAAWH,QAAQF,OAAOE,IAAf,IAAuB,WAAxC;;;MAGMI,UAAUH,kBAAkB3B,GAAlB,CAAsB,sBAAc;WAC3C,UAACT,KAAD,EAAoB;UAAZC,IAAY,uEAAP,EAAO;;aAClBG,WAAWJ,KAAX,aAAoBI,YAAY,QAAhC,IAA6CH,IAA7C,EAAP;KADF;GADc,CAAhB;;;MAOMuC,SAASH,iBAAiB5B,GAAjB,CAAqB,sBAAc;WACzC,UAACT,KAAD,EAAoB;UAAZC,IAAY,uEAAP,EAAO;;aAClBG,WAAWJ,KAAX,aAAoBI,YAAY,OAAhC,IAA4CH,IAA5C,EAAP;KADF;GADa,CAAf,CAIG;;MAGGwC,MAAMF,QAAQG,MAAR,CAAeT,MAAf,EAAuBS,MAAvB,CAA8BF,MAA9B,CAAZ;;;MAGMtC,OAAO,SAASA,IAAT,CAAcF,KAAd,EAAqB;QAC1BC,OAAO;YACLqC,QADK;iBAEAJ;KAFb;WAIOO,IAAIE,MAAJ,CAAW,UAACC,IAAD,EAAOC,MAAP;aAAkBA,OAAOD,IAAP,EAAa3C,IAAb,CAAlB;KAAX,EAAiDD,KAAjD,CAAP;GALF;;SAQOE,IAAP;;;;AAIF,AAAO,SAASC,SAAT,GAAwC;MAArB2C,OAAqB,uEAAb,EAAa;MAAT7C,IAAS,uEAAJ,EAAI;;MACvCiC,YAAYjC,KAAKkC,IAAL,IAAa,WAA/B;MACMY,QAAQ,EAAd;;SAEOC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6B,eAAO;UAC5BC,GAAN,IAAahD,KAAK4C,QAAQI,GAAR,CAAL,eACRjD,IADQ;iBAEAiC,SAFA;YAGLgB;OAHR;GADF;;SAQOH,KAAP;;;;AAIF,AAAO,SAASI,UAAT,CAAoBxB,MAApB,EAA+D;MAAnCyB,YAAmC,uEAAtB,WAAsB;MAATnD,IAAS,uEAAJ,EAAI;;MAChEqC,WAAWrC,KAAKkC,IAAL,IAAaR,OAAOQ,IAApB,IAA4B,WAA3C;MACIkB,WAAW;iBACA3B,eADA;gBAEDG,cAFC;iBAGAE;IACbqB,YAJa,CAAf;;MAMI,CAACC,QAAL,EAAe;UACP,IAAIC,KAAJ,gGAAiGF,YAAjG,2BAAmId,QAAnI,QAAN;;;SAGKpC,KAAKmD,SAAS1B,MAAT,CAAL,eAA4B1B,IAA5B,IAAkCkC,MAAMG,QAAxC,IAAP;;;;AAIF,AAAO,SAASiB,gBAAT,CAA0BC,SAA1B,EAAwE;;;MAAnCJ,YAAmC,uEAAtB,WAAsB;MAATnD,IAAS,uEAAJ,EAAI;;MACvEiC,YAAYjC,KAAKiC,SAAL,IAAkB,WAApC;MACMa,QAAQ,EAAd;;SAEOC,IAAP,CAAYQ,SAAZ,EAAuBP,OAAvB,CAA+B,eAAO;UAC9Bd,IAAN,IAAc,MAAKgB,UAAL,CAAgBK,UAAUN,GAAV,CAAhB,EAAgCE,YAAhC,eACTnD,IADS;iBAEDiC,SAFC;YAGNgB;OAHR;GADF;;SAQOH,KAAP;;;;;;;;;;;"}